{
  "version": 3,
  "sources": ["../../node_modules/compop/dist/index.js", "../../src/scripts/index.js", "../../src/scripts/components/main.js"],
  "sourcesContent": ["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Pop off and instantiate any components pushed onto global components array\n * @rparam {object} scaffold - Case scaffold where components and state are initialized by markup\n * @rparam {object} classMap - Object mapping component handles to corresponding classes\n * @rparam {object} actions - Object defining actions/commands that components will pub/sub\n * @rparam {Function} cb - Callback function once all components have been initialized\n * @return {void}\n */\nfunction pop(_ref) {\n  var _ref$scaffold = _ref.scaffold,\n      scaffold = _ref$scaffold === void 0 ? {} : _ref$scaffold,\n      _ref$classMap = _ref.classMap,\n      classMap = _ref$classMap === void 0 ? {} : _ref$classMap,\n      _ref$actions = _ref.actions,\n      actions = _ref$actions === void 0 ? {} : _ref$actions,\n      _ref$cb = _ref.cb,\n      cb = _ref$cb === void 0 ? null : _ref$cb;\n\n  /**\n   * Function to allow component classes to repop components inside dynamically set markup\n   * @param {Element}\n   */\n  function refresh() {\n    var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n    if (container === null) {\n      return;\n    } // Get all scripts from markup set in container\n\n\n    var scripts = container.querySelectorAll('script');\n\n    if (scripts.length === 0) {\n      return;\n    } // Evaluate scripts returned from component markup if for new component\n\n\n    scripts.forEach(function (script) {\n      eval(script.textContent);\n    }); // eslint-disable-line no-eval\n    // Instantiate components\n\n    pop({\n      scaffold: scaffold,\n      classMap: classMap,\n      actions: actions,\n      cb: cb\n    });\n  } // Pop component configs from global array and construct instances\n\n\n  while (scaffold.components.length > 0) {\n    var _scaffold$components = scaffold.components,\n        components = _scaffold$components === void 0 ? [] : _scaffold$components,\n        _scaffold$state = scaffold.state,\n        state = _scaffold$state === void 0 ? {} : _scaffold$state;\n    var config = components.shift();\n    var Class = classMap[config.handle];\n\n    if (typeof Class === 'function') {\n      new Class(_objectSpread({}, config, {\n        state: state,\n        actions: actions,\n        refresh: refresh\n      })); // eslint-disable-line no-new\n    }\n  }\n\n  if (cb) {\n    cb();\n  }\n}\n\nvar _default = pop;\nexports[\"default\"] = _default;", "import pop from \"compop\"\n\nimport Main from \"./components/main.js\";\n\nconst classMap = {\n\t'main': Main,\n};\n\nconst actions = {\n}\n\n// Construct components on DOM content loaded\nfunction handleDOMConentLoaded() {\n\tconst scaffold = window[\"my-site\"];\n\n\tfunction cb() {\n\t\t// Do something after components initialize\n\t}\n\n\t// Call component constructors\n\tpop({ scaffold, classMap, actions, cb });\n}\n\n// Attach event listener\ndocument.addEventListener(\"DOMContentLoaded\", handleDOMConentLoaded);\n", "export default class {\n\tconstructor({\n\t\tid,\n\t}) {\n\t\tconst el = document.getElementById(id);\n\n\t\tconsole.log(`Welcome to the ${el} event!`);\n\t}\n}\n"],
  "mappings": "wlBAAA,wCAEA,OAAO,eAAe,QAAS,aAAc,CAC3C,MAAO,KAET,QAAQ,QAAa,OAErB,iBAAiB,EAAQ,EAAgB,CAAE,GAAI,GAAO,OAAO,KAAK,GAAS,GAAI,OAAO,sBAAuB,CAAE,GAAI,GAAU,OAAO,sBAAsB,GAAS,AAAI,GAAgB,GAAU,EAAQ,OAAO,SAAU,EAAK,CAAE,MAAO,QAAO,yBAAyB,EAAQ,GAAK,cAAgB,EAAK,KAAK,MAAM,EAAM,GAAY,MAAO,GAE9U,uBAAuB,EAAQ,CAAE,OAAS,GAAI,EAAG,EAAI,UAAU,OAAQ,IAAK,CAAE,GAAI,GAAS,UAAU,IAAM,KAAO,UAAU,GAAK,GAAI,AAAI,EAAI,EAAK,QAAQ,EAAQ,IAAM,QAAQ,SAAU,EAAK,CAAE,gBAAgB,EAAQ,EAAK,EAAO,MAAkB,AAAI,OAAO,0BAA6B,OAAO,iBAAiB,EAAQ,OAAO,0BAA0B,IAAmB,QAAQ,GAAQ,QAAQ,SAAU,EAAK,CAAE,OAAO,eAAe,EAAQ,EAAK,OAAO,yBAAyB,EAAQ,MAAe,MAAO,GAE7f,yBAAyB,EAAK,EAAK,EAAO,CAAE,MAAI,KAAO,GAAO,OAAO,eAAe,EAAK,EAAK,CAAE,MAAO,EAAO,WAAY,GAAM,aAAc,GAAM,SAAU,KAAkB,EAAI,GAAO,EAAgB,EAU3M,aAAa,KAAM,CACjB,GAAI,eAAgB,KAAK,SACrB,SAAW,gBAAkB,OAAS,GAAK,cAC3C,cAAgB,KAAK,SACrB,SAAW,gBAAkB,OAAS,GAAK,cAC3C,aAAe,KAAK,QACpB,QAAU,eAAiB,OAAS,GAAK,aACzC,QAAU,KAAK,GACf,GAAK,UAAY,OAAS,KAAO,QAMrC,kBAAmB,CACjB,GAAI,WAAY,UAAU,OAAS,GAAK,UAAU,KAAO,OAAY,UAAU,GAAK,KAEpF,GAAI,YAAc,KAKlB,IAAI,SAAU,UAAU,iBAAiB,UAEzC,AAAI,QAAQ,SAAW,GAKvB,SAAQ,QAAQ,SAAU,OAAQ,CAChC,KAAK,OAAO,eAId,IAAI,CACF,SACA,SACA,QACA,OAKJ,KAAO,SAAS,WAAW,OAAS,GAAG,CACrC,GAAI,sBAAuB,SAAS,WAChC,WAAa,uBAAyB,OAAS,GAAK,qBACpD,gBAAkB,SAAS,MAC3B,MAAQ,kBAAoB,OAAS,GAAK,gBAC1C,OAAS,WAAW,QACpB,MAAQ,SAAS,OAAO,QAE5B,AAAI,MAAO,QAAU,YACnB,GAAI,OAAM,cAAc,GAAI,OAAQ,CAClC,MACA,QACA,WAKN,AAAI,IACF,KAIJ,GAAI,UAAW,IACf,QAAQ,QAAa,WCvFrB,MAAgB,OCAhB,WAAqB,CACpB,YAAY,CACX,MACE,CACF,GAAM,GAAK,SAAS,eAAe,GAEnC,QAAQ,IAAI,kBAAkB,cDFhC,GAAM,GAAW,CAChB,KAAQ,GAGH,EAAU,GAIhB,YAAiC,CAChC,GAAM,GAAW,OAAO,WAExB,YAAc,EAKd,cAAI,CAAE,WAAU,WAAU,UAAS,OAIpC,SAAS,iBAAiB,mBAAoB",
  "names": []
}
